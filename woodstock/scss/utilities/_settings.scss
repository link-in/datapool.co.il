/**
*-----------------------------------------------------------------------------------------------
* Theme settings.
*-----------------------------------------------------------------------------------------------
*/

/* Typography */

$base-font-size: 16px;

// $font-1: "Lato", "Helvetica Neue", Helvetica, Arial, sans-serif;
// $font-2: "Lato", "Helvetica Neue", Helvetica, Arial, sans-serif;
// $font-3: "Lato", "Helvetica Neue", Helvetica, Arial, sans-serif;

$baseline: $base-font-size * 1.5;

/* Colors */

$color-main: #6990cb;
$color-link: #6990cb;
$color-link-hover: #333;

$color-gray: rgba(0, 0, 0, 0.03);
$color-gray2: #ededed;
$color-light-gray: rgba(0, 0, 0, 0.03);

$color-text: #000;
$color-dark-text: #000;
$color-light-text: #fff;

$color-hr: #eee;

/* Positioning */

$margin-multiplier: 2;

$general-margin: $baseline * $margin-multiplier;

/* Mixins */

// Function for converting a px based font-size to rem.
@function calculateRem($size) {
  $remSize: $size / $base-font-size;
  //Default font size on html element is 100%, equivalent to 16px;
  @return #{$remSize}rem;
}

// Mixin that will include the fall back px declaration as well as the calculated rem value.
@mixin font-size($size, $line: $size * 1.6) {
  font-size: $size;
  line-height: $line;
  font-size: calculateRem($size);
  line-height: calculateRem($line);
}

// Baseline, measured in pixels
// The value should be the same as the font-size value for the html element
// If the html element's font-size is set to 62.5% (of the browser's default font-size of 16px),
// then the variable below would be 10px.

// h1 {
//   @include rem(font-size, 24px); // Simple
//   @include rem(border-bottom, 1px solid black); // Shorthand
//   @include rem(box-shadow, 0 0 2px #ccc, inset 0 0 5px #eee); // Multiple values
//   text-shadow: rem(1px 1px #eee, -1px -1px #eee); // Function and multiple values, warning: no fallback possible with rem function
//   // List support (Sass 3.3+)
//   @include rem((
//     margin: 20px 0,
//     padding: 10px
//   ));
// }

$rem-baseline: 16px !default;
$rem-fallback: true !default;
$rem-px-only: false !default;

// list-separator polyfill by Hugo Giraudel (https://sass-compatibility.github.io/#list_separator_function)
@function rem-separator($list) {
  @if function-exists('list-separator') == true {
    @return list-separator($list);
  }

  $test-list: ();
  @each $item in $list {
    $test-list: append($test-list, $item, space);
  }

  @return if($test-list == $list, space, comma);
}

@function rem($values...) {
  @if $rem-px-only {
    @return $values;
  }
  $rem: ();
  $separator: rem-separator($values);
  @each $value in $values {
    @if type-of($value) == 'number' and unit($value) == 'px' {
      $rem: append($rem, $value / ($rem-baseline / 1rem), $separator);
    } @else if type-of($value) == 'list' {
      $rem: append($rem, rem($value...), $separator);
    } @else {
      $rem: append($rem, $value, $separator);
    }
  }
  @return $rem;
}

@mixin rem($properties, $values...) {
  @if type-of($properties) == 'map' {
    @each $property in map-keys($properties) {
      @include rem($property, map-get($properties, $property));
    }
  } @else {
    @each $property in $properties {
      @if $rem-fallback or $rem-px-only {
        #{$property}: $values;
      }
      @if not $rem-px-only {
        #{$property}: rem($values...);
      }
    }
  }
}

// box-shadow

@mixin box-shadow($value) {
  -webkit-box-shadow: $value;
  -moz-box-shadow: $value;
  box-shadow: $value;
}

// border-radius

@mixin border-radius($radius) {
  -moz-border-radius: $radius;
  -webkit-border-radius: $radius;
  -ms-border-radius: $radius;
  border-radius: $radius;
  background-clip: padding-box; /* stops bg color from leaking outside the border: */
}

// Single side border-radius

@mixin border-top-radius($radius) {
  -webkit-border-top-right-radius: $radius;
  border-top-right-radius: $radius;
  -webkit-border-top-left-radius: $radius;
  border-top-left-radius: $radius;
  background-clip: padding-box;
}
@mixin border-right-radius($radius) {
  -webkit-border-bottom-right-radius: $radius;
  border-bottom-right-radius: $radius;
  -webkit-border-top-right-radius: $radius;
  border-top-right-radius: $radius;
  background-clip: padding-box;
}
@mixin border-bottom-radius($radius) {
  -webkit-border-bottom-right-radius: $radius;
  border-bottom-right-radius: $radius;
  -webkit-border-bottom-left-radius: $radius;
  border-bottom-left-radius: $radius;
  background-clip: padding-box;
}
@mixin border-left-radius($radius) {
  -webkit-border-bottom-left-radius: $radius;
  border-bottom-left-radius: $radius;
  -webkit-border-top-left-radius: $radius;
  border-top-left-radius: $radius;
  background-clip: padding-box;
}

// opacity

@mixin opacity($value: 0) {
  $value-percentage: $value * 100;

  opacity: $value;
  -ms-filter: 'progid:DXImageTransform.Microsoft.Alpha(Opacity=#{$value-percentage})';
  filter: alpha(opacity=#{$value-percentage});
}

// transition

@mixin transitions($transitions) {
  -webkit-transition: $transitions;
  -moz-transition: $transitions;
  -ms-transition: $transitions;
  -o-transition: $transitions;
  transition: $transitions;
}

// transform
@mixin transform($transforms) {
  -moz-transform: $transforms;
  -o-transform: $transforms;
  -ms-transform: $transforms;
  -webkit-transform: $transforms;
  transform: $transforms;
}

// transform
@mixin filter($filters) {
  -webkit-filter: $filters;
  -moz-filter: $filters;
  -o-filter: $filters;
  -ms-filter: $filters;
  filter: $filters;
}

// animation

@mixin keyframes($animation-name) {
  @-webkit-keyframes #{$animation-name} {
    @content;
  }
  @-moz-keyframes #{$animation-name} {
    @content;
  }
  @-ms-keyframes #{$animation-name} {
    @content;
  }
  @-o-keyframes #{$animation-name} {
    @content;
  }
  @keyframes #{$animation-name} {
    @content;
  }
}

@mixin animation($str) {
  -webkit-animation: #{$str};
  -moz-animation: #{$str};
  -ms-animation: #{$str};
  -o-animation: #{$str};
  animation: #{$str};
}

/* Media Queries */

//use: @include respondto(phone, tablet-l, tablet-p, desktop, xdesktop) {}

@mixin respond-to($media) {
  @if $media == phone {
    @media only screen and (max-width: 40em) {
      @content;
    }
  } @else if $media == phone-s {
    @media only screen and (max-width: 320px) {
      @content;
    }
  } @else if $media == tablet-p {
    @media only screen and (min-width: 40em) and (max-width: 61.94em) {
      @content;
    }
  } @else if $media == tablet-l {
    @media only screen and (min-width: 62em) and (max-width: 74.94em) {
      @content;
    }
  } @else if $media == desktop {
    @media only screen and (min-width: 64.063em) and (max-width: 90em) {
      @content;
    }
  } @else if $media == xdesktop {
    @media only screen and (min-width: 90.063em) and (max-width: 120em) {
      @content;
    }
  }
  // Non-Retina
  @else if $media == non-retina {
    @media screen and (-webkit-max-device-pixel-ratio: 1) {
      @content;
    }
  }
  // Retina Only
  @else if $media == retina {
    @media screen and (-webkit-min-device-pixel-ratio: 2) {
      @content;
    }
  }
  // Specific max width
  @else {
    @media only screen and (max-width: #{$media}px) {
      @content;
    }
  }
}

@mixin respondto($media...) {
  @each $mediatype in $media {
    @include respond-to($mediatype) {
      @content;
    }
  }
}

// use: .class { @extend .transition-off; }

.transition {
  -webkit-transition: all 0.2s ease-in-out;
  -moz-transition: all 0.2s ease-in-out;
  -ms-transition: all 0.2s ease-in-out;
  -o-transition: all 0.2s ease-in-out;
  transition: all 0.2s ease-in-out;
}

// use: .class { @extend .transition-off; }
.transition-off {
  -webkit-transition: none;
  -moz-transition: none;
  -ms-transition: none;
  -o-transition: none;
  transition: none;
}

// use: .class { @extend .after-clear; }
.after-clear {
  content: '';
  display: block;
  clear: both;
}

// use: .class { @extend .box-sizing; }
.box-sizing {
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
}

// use: .class { @extend .icon-style; }

.icon-style {
  speak: none;
  line-height: 1;
  font-style: normal;
  font-weight: normal;
  font-variant: normal;
  text-transform: none;
  text-rendering: auto;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  transform: translate(0, 0);
}
